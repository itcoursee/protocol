// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/protocol/recommend.proto

package protocol

import (
	context "context"
	recommend "github.com/itcoursee/core/recommend"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Recommend_Add_FullMethodName    = "/com.itcoursee.protocol.Recommend/Add"
	Recommend_Paging_FullMethodName = "/com.itcoursee.protocol.Recommend/Paging"
	Recommend_Delete_FullMethodName = "/com.itcoursee.protocol.Recommend/Delete"
)

// RecommendClient is the client API for Recommend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecommendClient interface {
	// 创建
	Add(ctx context.Context, in *recommend.AddReq, opts ...grpc.CallOption) (*recommend.AddRsp, error)
	// 分页
	Paging(ctx context.Context, in *recommend.PagingReq, opts ...grpc.CallOption) (*recommend.PagingRsp, error)
	// 删除
	Delete(ctx context.Context, in *recommend.DeleteReq, opts ...grpc.CallOption) (*recommend.DeleteRsp, error)
}

type recommendClient struct {
	cc grpc.ClientConnInterface
}

func NewRecommendClient(cc grpc.ClientConnInterface) RecommendClient {
	return &recommendClient{cc}
}

func (c *recommendClient) Add(ctx context.Context, in *recommend.AddReq, opts ...grpc.CallOption) (*recommend.AddRsp, error) {
	out := new(recommend.AddRsp)
	err := c.cc.Invoke(ctx, Recommend_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendClient) Paging(ctx context.Context, in *recommend.PagingReq, opts ...grpc.CallOption) (*recommend.PagingRsp, error) {
	out := new(recommend.PagingRsp)
	err := c.cc.Invoke(ctx, Recommend_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recommendClient) Delete(ctx context.Context, in *recommend.DeleteReq, opts ...grpc.CallOption) (*recommend.DeleteRsp, error) {
	out := new(recommend.DeleteRsp)
	err := c.cc.Invoke(ctx, Recommend_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecommendServer is the server API for Recommend service.
// All implementations must embed UnimplementedRecommendServer
// for forward compatibility
type RecommendServer interface {
	// 创建
	Add(context.Context, *recommend.AddReq) (*recommend.AddRsp, error)
	// 分页
	Paging(context.Context, *recommend.PagingReq) (*recommend.PagingRsp, error)
	// 删除
	Delete(context.Context, *recommend.DeleteReq) (*recommend.DeleteRsp, error)
	mustEmbedUnimplementedRecommendServer()
}

// UnimplementedRecommendServer must be embedded to have forward compatible implementations.
type UnimplementedRecommendServer struct {
}

func (UnimplementedRecommendServer) Add(context.Context, *recommend.AddReq) (*recommend.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedRecommendServer) Paging(context.Context, *recommend.PagingReq) (*recommend.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedRecommendServer) Delete(context.Context, *recommend.DeleteReq) (*recommend.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedRecommendServer) mustEmbedUnimplementedRecommendServer() {}

// UnsafeRecommendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecommendServer will
// result in compilation errors.
type UnsafeRecommendServer interface {
	mustEmbedUnimplementedRecommendServer()
}

func RegisterRecommendServer(s grpc.ServiceRegistrar, srv RecommendServer) {
	s.RegisterService(&Recommend_ServiceDesc, srv)
}

func _Recommend_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommend.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).Add(ctx, req.(*recommend.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommend_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommend.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).Paging(ctx, req.(*recommend.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Recommend_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(recommend.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecommendServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Recommend_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecommendServer).Delete(ctx, req.(*recommend.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Recommend_ServiceDesc is the grpc.ServiceDesc for Recommend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Recommend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.protocol.Recommend",
	HandlerType: (*RecommendServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Recommend_Add_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Recommend_Paging_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Recommend_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/protocol/recommend.proto",
}
