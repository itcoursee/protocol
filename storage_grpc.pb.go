// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/protocol/storage.proto

package protocol

import (
	context "context"
	file "gitlab.com/ruijc/storage/core/file"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Storage_Initiate_FullMethodName = "/com.itcoursee.protocol.Storage/Initiate"
	Storage_Url_FullMethodName      = "/com.itcoursee.protocol.Storage/Url"
	Storage_Complete_FullMethodName = "/com.itcoursee.protocol.Storage/Complete"
)

// StorageClient is the client API for Storage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageClient interface {
	// 初始化
	// protolint:disable:next MAX_LINE_LENGTH
	Initiate(ctx context.Context, in *file.InitiateReq, opts ...grpc.CallOption) (*file.InitiateRsp, error)
	// 地址
	// protolint:disable:next MAX_LINE_LENGTH
	Url(ctx context.Context, in *file.UrlReq, opts ...grpc.CallOption) (*file.UrlRsp, error)
	// 完成
	// protolint:disable:next MAX_LINE_LENGTH
	Complete(ctx context.Context, in *file.CompleteReq, opts ...grpc.CallOption) (*file.CompleteRsp, error)
}

type storageClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageClient(cc grpc.ClientConnInterface) StorageClient {
	return &storageClient{cc}
}

func (c *storageClient) Initiate(ctx context.Context, in *file.InitiateReq, opts ...grpc.CallOption) (*file.InitiateRsp, error) {
	out := new(file.InitiateRsp)
	err := c.cc.Invoke(ctx, Storage_Initiate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Url(ctx context.Context, in *file.UrlReq, opts ...grpc.CallOption) (*file.UrlRsp, error) {
	out := new(file.UrlRsp)
	err := c.cc.Invoke(ctx, Storage_Url_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageClient) Complete(ctx context.Context, in *file.CompleteReq, opts ...grpc.CallOption) (*file.CompleteRsp, error) {
	out := new(file.CompleteRsp)
	err := c.cc.Invoke(ctx, Storage_Complete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServer is the server API for Storage service.
// All implementations must embed UnimplementedStorageServer
// for forward compatibility
type StorageServer interface {
	// 初始化
	// protolint:disable:next MAX_LINE_LENGTH
	Initiate(context.Context, *file.InitiateReq) (*file.InitiateRsp, error)
	// 地址
	// protolint:disable:next MAX_LINE_LENGTH
	Url(context.Context, *file.UrlReq) (*file.UrlRsp, error)
	// 完成
	// protolint:disable:next MAX_LINE_LENGTH
	Complete(context.Context, *file.CompleteReq) (*file.CompleteRsp, error)
	mustEmbedUnimplementedStorageServer()
}

// UnimplementedStorageServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServer struct {
}

func (UnimplementedStorageServer) Initiate(context.Context, *file.InitiateReq) (*file.InitiateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Initiate not implemented")
}
func (UnimplementedStorageServer) Url(context.Context, *file.UrlReq) (*file.UrlRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Url not implemented")
}
func (UnimplementedStorageServer) Complete(context.Context, *file.CompleteReq) (*file.CompleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedStorageServer) mustEmbedUnimplementedStorageServer() {}

// UnsafeStorageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServer will
// result in compilation errors.
type UnsafeStorageServer interface {
	mustEmbedUnimplementedStorageServer()
}

func RegisterStorageServer(s grpc.ServiceRegistrar, srv StorageServer) {
	s.RegisterService(&Storage_ServiceDesc, srv)
}

func _Storage_Initiate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(file.InitiateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Initiate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_Initiate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Initiate(ctx, req.(*file.InitiateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Url_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(file.UrlReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Url(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_Url_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Url(ctx, req.(*file.UrlReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Storage_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(file.CompleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Storage_Complete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServer).Complete(ctx, req.(*file.CompleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Storage_ServiceDesc is the grpc.ServiceDesc for Storage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Storage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.protocol.Storage",
	HandlerType: (*StorageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Initiate",
			Handler:    _Storage_Initiate_Handler,
		},
		{
			MethodName: "Url",
			Handler:    _Storage_Url_Handler,
		},
		{
			MethodName: "Complete",
			Handler:    _Storage_Complete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/protocol/storage.proto",
}
