// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.14.0
// source: itcoursee/protocol/courseware/rpc.proto

package courseware

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

var File_itcoursee_protocol_courseware_rpc_proto protoreflect.FileDescriptor

var file_itcoursee_protocol_courseware_rpc_proto_rawDesc = []byte{
	0x0a, 0x27, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f,
	0x72, 0x70, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x69, 0x74, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x1a, 0x27, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x61, 0x64, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x27, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65,
	0x2f, 0x67, 0x65, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69, 0x74, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x32, 0xd0, 0x05, 0x0a, 0x03, 0x52, 0x70, 0x63, 0x12, 0x65, 0x0a, 0x0b, 0x41, 0x64,
	0x64, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x12, 0x2d, 0x2e, 0x69, 0x74, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x79, 0x43,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x67, 0x0a, 0x0c, 0x41, 0x64, 0x64, 0x42, 0x79, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x2e, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x42, 0x79, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x25, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x55, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x12, 0x25, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x25, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75,
	0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x73, 0x70, 0x22,
	0x00, 0x12, 0x6f, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x12, 0x2e, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79, 0x43, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x52, 0x65,
	0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x52, 0x73, 0x70,
	0x22, 0x00, 0x12, 0x71, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4c, 0x65, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x12, 0x2f, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4c, 0x65, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x71, 0x1a, 0x2d, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x73, 0x42, 0x79, 0x4f, 0x77, 0x6e, 0x65, 0x72,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x69, 0x74, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x12, 0x5e, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x28, 0x2e, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x28, 0x2e, 0x69, 0x74, 0x63, 0x6f,
	0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x52, 0x73, 0x70, 0x22, 0x00, 0x42, 0x5a, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x2e, 0x69, 0x74, 0x63,
	0x6f, 0x75, 0x72, 0x73, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x74, 0x63, 0x6f, 0x75, 0x72, 0x73,
	0x65, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2f, 0x63, 0x6f, 0x75, 0x72,
	0x73, 0x65, 0x77, 0x61, 0x72, 0x65, 0x3b, 0x63, 0x6f, 0x75, 0x72, 0x73, 0x65, 0x77, 0x61, 0x72,
	0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var file_itcoursee_protocol_courseware_rpc_proto_goTypes = []interface{}{
	(*AddByCourseReq)(nil),   // 0: itcoursee.protocol.courseware.AddByCourseReq
	(*AddByLectureReq)(nil),  // 1: itcoursee.protocol.courseware.AddByLectureReq
	(*GetReq)(nil),           // 2: itcoursee.protocol.courseware.GetReq
	(*GetsByCourseReq)(nil),  // 3: itcoursee.protocol.courseware.GetsByCourseReq
	(*GetsByLectureReq)(nil), // 4: itcoursee.protocol.courseware.GetsByLectureReq
	(*UpdateReq)(nil),        // 5: itcoursee.protocol.courseware.UpdateReq
	(*DeleteReq)(nil),        // 6: itcoursee.protocol.courseware.DeleteReq
	(*AddRsp)(nil),           // 7: itcoursee.protocol.courseware.AddRsp
	(*GetRsp)(nil),           // 8: itcoursee.protocol.courseware.GetRsp
	(*GetsByOwnerRsp)(nil),   // 9: itcoursee.protocol.courseware.GetsByOwnerRsp
	(*UpdateRsp)(nil),        // 10: itcoursee.protocol.courseware.UpdateRsp
	(*DeleteRsp)(nil),        // 11: itcoursee.protocol.courseware.DeleteRsp
}
var file_itcoursee_protocol_courseware_rpc_proto_depIdxs = []int32{
	0,  // 0: itcoursee.protocol.courseware.Rpc.AddByCourse:input_type -> itcoursee.protocol.courseware.AddByCourseReq
	1,  // 1: itcoursee.protocol.courseware.Rpc.AddByLecture:input_type -> itcoursee.protocol.courseware.AddByLectureReq
	2,  // 2: itcoursee.protocol.courseware.Rpc.Get:input_type -> itcoursee.protocol.courseware.GetReq
	3,  // 3: itcoursee.protocol.courseware.Rpc.GetsByCourse:input_type -> itcoursee.protocol.courseware.GetsByCourseReq
	4,  // 4: itcoursee.protocol.courseware.Rpc.GetsByLecture:input_type -> itcoursee.protocol.courseware.GetsByLectureReq
	5,  // 5: itcoursee.protocol.courseware.Rpc.Update:input_type -> itcoursee.protocol.courseware.UpdateReq
	6,  // 6: itcoursee.protocol.courseware.Rpc.Delete:input_type -> itcoursee.protocol.courseware.DeleteReq
	7,  // 7: itcoursee.protocol.courseware.Rpc.AddByCourse:output_type -> itcoursee.protocol.courseware.AddRsp
	7,  // 8: itcoursee.protocol.courseware.Rpc.AddByLecture:output_type -> itcoursee.protocol.courseware.AddRsp
	8,  // 9: itcoursee.protocol.courseware.Rpc.Get:output_type -> itcoursee.protocol.courseware.GetRsp
	9,  // 10: itcoursee.protocol.courseware.Rpc.GetsByCourse:output_type -> itcoursee.protocol.courseware.GetsByOwnerRsp
	9,  // 11: itcoursee.protocol.courseware.Rpc.GetsByLecture:output_type -> itcoursee.protocol.courseware.GetsByOwnerRsp
	10, // 12: itcoursee.protocol.courseware.Rpc.Update:output_type -> itcoursee.protocol.courseware.UpdateRsp
	11, // 13: itcoursee.protocol.courseware.Rpc.Delete:output_type -> itcoursee.protocol.courseware.DeleteRsp
	7,  // [7:14] is the sub-list for method output_type
	0,  // [0:7] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_itcoursee_protocol_courseware_rpc_proto_init() }
func file_itcoursee_protocol_courseware_rpc_proto_init() {
	if File_itcoursee_protocol_courseware_rpc_proto != nil {
		return
	}
	file_itcoursee_protocol_courseware_add_proto_init()
	file_itcoursee_protocol_courseware_get_proto_init()
	file_itcoursee_protocol_courseware_update_proto_init()
	file_itcoursee_protocol_courseware_delete_proto_init()
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_itcoursee_protocol_courseware_rpc_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_itcoursee_protocol_courseware_rpc_proto_goTypes,
		DependencyIndexes: file_itcoursee_protocol_courseware_rpc_proto_depIdxs,
	}.Build()
	File_itcoursee_protocol_courseware_rpc_proto = out.File
	file_itcoursee_protocol_courseware_rpc_proto_rawDesc = nil
	file_itcoursee_protocol_courseware_rpc_proto_goTypes = nil
	file_itcoursee_protocol_courseware_rpc_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RpcClient is the client API for Rpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RpcClient interface {
	// 创建一个课程课件
	AddByCourse(ctx context.Context, in *AddByCourseReq, opts ...grpc.CallOption) (*AddRsp, error)
	// 创建一个讲次课件
	AddByLecture(ctx context.Context, in *AddByLectureReq, opts ...grpc.CallOption) (*AddRsp, error)
	// 获取一个课件
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error)
	// 获得课程所有的课件
	GetsByCourse(ctx context.Context, in *GetsByCourseReq, opts ...grpc.CallOption) (*GetsByOwnerRsp, error)
	// 获得讲次所有的课件
	GetsByLecture(ctx context.Context, in *GetsByLectureReq, opts ...grpc.CallOption) (*GetsByOwnerRsp, error)
	// 修改一个课件
	Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRsp, error)
	// 删除一个课件
	Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRsp, error)
}

type rpcClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcClient(cc grpc.ClientConnInterface) RpcClient {
	return &rpcClient{cc}
}

func (c *rpcClient) AddByCourse(ctx context.Context, in *AddByCourseReq, opts ...grpc.CallOption) (*AddRsp, error) {
	out := new(AddRsp)
	err := c.cc.Invoke(ctx, "/itcoursee.protocol.courseware.Rpc/AddByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) AddByLecture(ctx context.Context, in *AddByLectureReq, opts ...grpc.CallOption) (*AddRsp, error) {
	out := new(AddRsp)
	err := c.cc.Invoke(ctx, "/itcoursee.protocol.courseware.Rpc/AddByLecture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetRsp, error) {
	out := new(GetRsp)
	err := c.cc.Invoke(ctx, "/itcoursee.protocol.courseware.Rpc/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetsByCourse(ctx context.Context, in *GetsByCourseReq, opts ...grpc.CallOption) (*GetsByOwnerRsp, error) {
	out := new(GetsByOwnerRsp)
	err := c.cc.Invoke(ctx, "/itcoursee.protocol.courseware.Rpc/GetsByCourse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) GetsByLecture(ctx context.Context, in *GetsByLectureReq, opts ...grpc.CallOption) (*GetsByOwnerRsp, error) {
	out := new(GetsByOwnerRsp)
	err := c.cc.Invoke(ctx, "/itcoursee.protocol.courseware.Rpc/GetsByLecture", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Update(ctx context.Context, in *UpdateReq, opts ...grpc.CallOption) (*UpdateRsp, error) {
	out := new(UpdateRsp)
	err := c.cc.Invoke(ctx, "/itcoursee.protocol.courseware.Rpc/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcClient) Delete(ctx context.Context, in *DeleteReq, opts ...grpc.CallOption) (*DeleteRsp, error) {
	out := new(DeleteRsp)
	err := c.cc.Invoke(ctx, "/itcoursee.protocol.courseware.Rpc/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcServer is the server API for Rpc service.
type RpcServer interface {
	// 创建一个课程课件
	AddByCourse(context.Context, *AddByCourseReq) (*AddRsp, error)
	// 创建一个讲次课件
	AddByLecture(context.Context, *AddByLectureReq) (*AddRsp, error)
	// 获取一个课件
	Get(context.Context, *GetReq) (*GetRsp, error)
	// 获得课程所有的课件
	GetsByCourse(context.Context, *GetsByCourseReq) (*GetsByOwnerRsp, error)
	// 获得讲次所有的课件
	GetsByLecture(context.Context, *GetsByLectureReq) (*GetsByOwnerRsp, error)
	// 修改一个课件
	Update(context.Context, *UpdateReq) (*UpdateRsp, error)
	// 删除一个课件
	Delete(context.Context, *DeleteReq) (*DeleteRsp, error)
}

// UnimplementedRpcServer can be embedded to have forward compatible implementations.
type UnimplementedRpcServer struct {
}

func (*UnimplementedRpcServer) AddByCourse(context.Context, *AddByCourseReq) (*AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddByCourse not implemented")
}
func (*UnimplementedRpcServer) AddByLecture(context.Context, *AddByLectureReq) (*AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddByLecture not implemented")
}
func (*UnimplementedRpcServer) Get(context.Context, *GetReq) (*GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedRpcServer) GetsByCourse(context.Context, *GetsByCourseReq) (*GetsByOwnerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetsByCourse not implemented")
}
func (*UnimplementedRpcServer) GetsByLecture(context.Context, *GetsByLectureReq) (*GetsByOwnerRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetsByLecture not implemented")
}
func (*UnimplementedRpcServer) Update(context.Context, *UpdateReq) (*UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedRpcServer) Delete(context.Context, *DeleteReq) (*DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}

func RegisterRpcServer(s *grpc.Server, srv RpcServer) {
	s.RegisterService(&_Rpc_serviceDesc, srv)
}

func _Rpc_AddByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddByCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).AddByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itcoursee.protocol.courseware.Rpc/AddByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).AddByCourse(ctx, req.(*AddByCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_AddByLecture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddByLectureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).AddByLecture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itcoursee.protocol.courseware.Rpc/AddByLecture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).AddByLecture(ctx, req.(*AddByLectureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itcoursee.protocol.courseware.Rpc/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsByCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itcoursee.protocol.courseware.Rpc/GetsByCourse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetsByCourse(ctx, req.(*GetsByCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_GetsByLecture_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetsByLectureReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).GetsByLecture(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itcoursee.protocol.courseware.Rpc/GetsByLecture",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).GetsByLecture(ctx, req.(*GetsByLectureReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itcoursee.protocol.courseware.Rpc/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Update(ctx, req.(*UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Rpc_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/itcoursee.protocol.courseware.Rpc/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcServer).Delete(ctx, req.(*DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "itcoursee.protocol.courseware.Rpc",
	HandlerType: (*RpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddByCourse",
			Handler:    _Rpc_AddByCourse_Handler,
		},
		{
			MethodName: "AddByLecture",
			Handler:    _Rpc_AddByLecture_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Rpc_Get_Handler,
		},
		{
			MethodName: "GetsByCourse",
			Handler:    _Rpc_GetsByCourse_Handler,
		},
		{
			MethodName: "GetsByLecture",
			Handler:    _Rpc_GetsByLecture_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Rpc_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Rpc_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "itcoursee/protocol/courseware/rpc.proto",
}
