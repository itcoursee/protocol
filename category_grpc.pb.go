// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/protocol/category.proto

package protocol

import (
	context "context"
	category "github.com/itcoursee/core/category"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Category_Add_FullMethodName      = "/com.itcoursee.protocol.Category/Add"
	Category_Get_FullMethodName      = "/com.itcoursee.protocol.Category/Get"
	Category_Children_FullMethodName = "/com.itcoursee.protocol.Category/Children"
	Category_Update_FullMethodName   = "/com.itcoursee.protocol.Category/Update"
	Category_Move_FullMethodName     = "/com.itcoursee.protocol.Category/Move"
	Category_Delete_FullMethodName   = "/com.itcoursee.protocol.Category/Delete"
)

// CategoryClient is the client API for Category service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CategoryClient interface {
	// 创建
	Add(ctx context.Context, in *category.AddReq, opts ...grpc.CallOption) (*category.AddRsp, error)
	// 获取
	Get(ctx context.Context, in *category.GetReq, opts ...grpc.CallOption) (*category.GetRsp, error)
	// 按父分类获取子分类列表
	Children(ctx context.Context, in *category.ChildrenReq, opts ...grpc.CallOption) (*category.ChildrenRsp, error)
	// 更新
	Update(ctx context.Context, in *category.UpdateReq, opts ...grpc.CallOption) (*category.UpdateRsp, error)
	// 移动
	Move(ctx context.Context, in *category.MoveReq, opts ...grpc.CallOption) (*category.MoveRsp, error)
	// 删除
	Delete(ctx context.Context, in *category.DeleteReq, opts ...grpc.CallOption) (*category.DeleteRsp, error)
}

type categoryClient struct {
	cc grpc.ClientConnInterface
}

func NewCategoryClient(cc grpc.ClientConnInterface) CategoryClient {
	return &categoryClient{cc}
}

func (c *categoryClient) Add(ctx context.Context, in *category.AddReq, opts ...grpc.CallOption) (*category.AddRsp, error) {
	out := new(category.AddRsp)
	err := c.cc.Invoke(ctx, Category_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) Get(ctx context.Context, in *category.GetReq, opts ...grpc.CallOption) (*category.GetRsp, error) {
	out := new(category.GetRsp)
	err := c.cc.Invoke(ctx, Category_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) Children(ctx context.Context, in *category.ChildrenReq, opts ...grpc.CallOption) (*category.ChildrenRsp, error) {
	out := new(category.ChildrenRsp)
	err := c.cc.Invoke(ctx, Category_Children_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) Update(ctx context.Context, in *category.UpdateReq, opts ...grpc.CallOption) (*category.UpdateRsp, error) {
	out := new(category.UpdateRsp)
	err := c.cc.Invoke(ctx, Category_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) Move(ctx context.Context, in *category.MoveReq, opts ...grpc.CallOption) (*category.MoveRsp, error) {
	out := new(category.MoveRsp)
	err := c.cc.Invoke(ctx, Category_Move_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *categoryClient) Delete(ctx context.Context, in *category.DeleteReq, opts ...grpc.CallOption) (*category.DeleteRsp, error) {
	out := new(category.DeleteRsp)
	err := c.cc.Invoke(ctx, Category_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CategoryServer is the server API for Category service.
// All implementations must embed UnimplementedCategoryServer
// for forward compatibility
type CategoryServer interface {
	// 创建
	Add(context.Context, *category.AddReq) (*category.AddRsp, error)
	// 获取
	Get(context.Context, *category.GetReq) (*category.GetRsp, error)
	// 按父分类获取子分类列表
	Children(context.Context, *category.ChildrenReq) (*category.ChildrenRsp, error)
	// 更新
	Update(context.Context, *category.UpdateReq) (*category.UpdateRsp, error)
	// 移动
	Move(context.Context, *category.MoveReq) (*category.MoveRsp, error)
	// 删除
	Delete(context.Context, *category.DeleteReq) (*category.DeleteRsp, error)
	mustEmbedUnimplementedCategoryServer()
}

// UnimplementedCategoryServer must be embedded to have forward compatible implementations.
type UnimplementedCategoryServer struct {
}

func (UnimplementedCategoryServer) Add(context.Context, *category.AddReq) (*category.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCategoryServer) Get(context.Context, *category.GetReq) (*category.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedCategoryServer) Children(context.Context, *category.ChildrenReq) (*category.ChildrenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Children not implemented")
}
func (UnimplementedCategoryServer) Update(context.Context, *category.UpdateReq) (*category.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedCategoryServer) Move(context.Context, *category.MoveReq) (*category.MoveRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Move not implemented")
}
func (UnimplementedCategoryServer) Delete(context.Context, *category.DeleteReq) (*category.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCategoryServer) mustEmbedUnimplementedCategoryServer() {}

// UnsafeCategoryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CategoryServer will
// result in compilation errors.
type UnsafeCategoryServer interface {
	mustEmbedUnimplementedCategoryServer()
}

func RegisterCategoryServer(s grpc.ServiceRegistrar, srv CategoryServer) {
	s.RegisterService(&Category_ServiceDesc, srv)
}

func _Category_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(category.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).Add(ctx, req.(*category.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(category.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).Get(ctx, req.(*category.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_Children_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(category.ChildrenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).Children(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_Children_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).Children(ctx, req.(*category.ChildrenReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(category.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).Update(ctx, req.(*category.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_Move_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(category.MoveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).Move(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_Move_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).Move(ctx, req.(*category.MoveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Category_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(category.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CategoryServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Category_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CategoryServer).Delete(ctx, req.(*category.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Category_ServiceDesc is the grpc.ServiceDesc for Category service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Category_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.protocol.Category",
	HandlerType: (*CategoryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Category_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Category_Get_Handler,
		},
		{
			MethodName: "Children",
			Handler:    _Category_Children_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Category_Update_Handler,
		},
		{
			MethodName: "Move",
			Handler:    _Category_Move_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Category_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/protocol/category.proto",
}
