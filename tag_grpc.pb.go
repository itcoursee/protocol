// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/protocol/tag.proto

package protocol

import (
	context "context"
	tag "github.com/itcoursee/core/tag"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Tag_Add_FullMethodName    = "/com.itcoursee.protocol.Tag/Add"
	Tag_Get_FullMethodName    = "/com.itcoursee.protocol.Tag/Get"
	Tag_Paging_FullMethodName = "/com.itcoursee.protocol.Tag/Paging"
	Tag_Update_FullMethodName = "/com.itcoursee.protocol.Tag/Update"
	Tag_Delete_FullMethodName = "/com.itcoursee.protocol.Tag/Delete"
)

// TagClient is the client API for Tag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TagClient interface {
	// 创建
	Add(ctx context.Context, in *tag.AddReq, opts ...grpc.CallOption) (*tag.AddRsp, error)
	// 获取
	Get(ctx context.Context, in *tag.GetReq, opts ...grpc.CallOption) (*tag.GetRsp, error)
	// 分页
	Paging(ctx context.Context, in *tag.PagingReq, opts ...grpc.CallOption) (*tag.PagingRsp, error)
	// 修改
	Update(ctx context.Context, in *tag.UpdateReq, opts ...grpc.CallOption) (*tag.UpdateRsp, error)
	// 删除
	Delete(ctx context.Context, in *tag.DeleteReq, opts ...grpc.CallOption) (*tag.DeleteRsp, error)
}

type tagClient struct {
	cc grpc.ClientConnInterface
}

func NewTagClient(cc grpc.ClientConnInterface) TagClient {
	return &tagClient{cc}
}

func (c *tagClient) Add(ctx context.Context, in *tag.AddReq, opts ...grpc.CallOption) (*tag.AddRsp, error) {
	out := new(tag.AddRsp)
	err := c.cc.Invoke(ctx, Tag_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) Get(ctx context.Context, in *tag.GetReq, opts ...grpc.CallOption) (*tag.GetRsp, error) {
	out := new(tag.GetRsp)
	err := c.cc.Invoke(ctx, Tag_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) Paging(ctx context.Context, in *tag.PagingReq, opts ...grpc.CallOption) (*tag.PagingRsp, error) {
	out := new(tag.PagingRsp)
	err := c.cc.Invoke(ctx, Tag_Paging_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) Update(ctx context.Context, in *tag.UpdateReq, opts ...grpc.CallOption) (*tag.UpdateRsp, error) {
	out := new(tag.UpdateRsp)
	err := c.cc.Invoke(ctx, Tag_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tagClient) Delete(ctx context.Context, in *tag.DeleteReq, opts ...grpc.CallOption) (*tag.DeleteRsp, error) {
	out := new(tag.DeleteRsp)
	err := c.cc.Invoke(ctx, Tag_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TagServer is the server API for Tag service.
// All implementations must embed UnimplementedTagServer
// for forward compatibility
type TagServer interface {
	// 创建
	Add(context.Context, *tag.AddReq) (*tag.AddRsp, error)
	// 获取
	Get(context.Context, *tag.GetReq) (*tag.GetRsp, error)
	// 分页
	Paging(context.Context, *tag.PagingReq) (*tag.PagingRsp, error)
	// 修改
	Update(context.Context, *tag.UpdateReq) (*tag.UpdateRsp, error)
	// 删除
	Delete(context.Context, *tag.DeleteReq) (*tag.DeleteRsp, error)
	mustEmbedUnimplementedTagServer()
}

// UnimplementedTagServer must be embedded to have forward compatible implementations.
type UnimplementedTagServer struct {
}

func (UnimplementedTagServer) Add(context.Context, *tag.AddReq) (*tag.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedTagServer) Get(context.Context, *tag.GetReq) (*tag.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedTagServer) Paging(context.Context, *tag.PagingReq) (*tag.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedTagServer) Update(context.Context, *tag.UpdateReq) (*tag.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedTagServer) Delete(context.Context, *tag.DeleteReq) (*tag.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedTagServer) mustEmbedUnimplementedTagServer() {}

// UnsafeTagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TagServer will
// result in compilation errors.
type UnsafeTagServer interface {
	mustEmbedUnimplementedTagServer()
}

func RegisterTagServer(s grpc.ServiceRegistrar, srv TagServer) {
	s.RegisterService(&Tag_ServiceDesc, srv)
}

func _Tag_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tag.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).Add(ctx, req.(*tag.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tag.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).Get(ctx, req.(*tag.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tag.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_Paging_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).Paging(ctx, req.(*tag.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tag.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).Update(ctx, req.(*tag.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Tag_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(tag.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TagServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Tag_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TagServer).Delete(ctx, req.(*tag.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Tag_ServiceDesc is the grpc.ServiceDesc for Tag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Tag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.protocol.Tag",
	HandlerType: (*TagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Tag_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Tag_Get_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Tag_Paging_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Tag_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Tag_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/protocol/tag.proto",
}
