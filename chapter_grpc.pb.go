// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.9
// source: com/itcoursee/protocol/chapter.proto

package protocol

import (
	context "context"
	chapter "github.com/itcoursee/core/chapter"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Chapter_Add_FullMethodName          = "/com.itcoursee.protocol.Chapter/Add"
	Chapter_Get_FullMethodName          = "/com.itcoursee.protocol.Chapter/Get"
	Chapter_GetsByCourse_FullMethodName = "/com.itcoursee.protocol.Chapter/GetsByCourse"
	Chapter_Update_FullMethodName       = "/com.itcoursee.protocol.Chapter/Update"
	Chapter_Delete_FullMethodName       = "/com.itcoursee.protocol.Chapter/Delete"
)

// ChapterClient is the client API for Chapter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChapterClient interface {
	// 创建
	Add(ctx context.Context, in *chapter.AddReq, opts ...grpc.CallOption) (*chapter.AddRsp, error)
	// 获取
	Get(ctx context.Context, in *chapter.GetReq, opts ...grpc.CallOption) (*chapter.GetRsp, error)
	// 获得课程所有
	GetsByCourse(ctx context.Context, in *chapter.GetsByCourseReq, opts ...grpc.CallOption) (*chapter.GetsByCourseRsp, error)
	// 修改
	Update(ctx context.Context, in *chapter.UpdateReq, opts ...grpc.CallOption) (*chapter.UpdateRsp, error)
	// 删除
	Delete(ctx context.Context, in *chapter.DeleteReq, opts ...grpc.CallOption) (*chapter.DeleteRsp, error)
}

type chapterClient struct {
	cc grpc.ClientConnInterface
}

func NewChapterClient(cc grpc.ClientConnInterface) ChapterClient {
	return &chapterClient{cc}
}

func (c *chapterClient) Add(ctx context.Context, in *chapter.AddReq, opts ...grpc.CallOption) (*chapter.AddRsp, error) {
	out := new(chapter.AddRsp)
	err := c.cc.Invoke(ctx, Chapter_Add_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterClient) Get(ctx context.Context, in *chapter.GetReq, opts ...grpc.CallOption) (*chapter.GetRsp, error) {
	out := new(chapter.GetRsp)
	err := c.cc.Invoke(ctx, Chapter_Get_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterClient) GetsByCourse(ctx context.Context, in *chapter.GetsByCourseReq, opts ...grpc.CallOption) (*chapter.GetsByCourseRsp, error) {
	out := new(chapter.GetsByCourseRsp)
	err := c.cc.Invoke(ctx, Chapter_GetsByCourse_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterClient) Update(ctx context.Context, in *chapter.UpdateReq, opts ...grpc.CallOption) (*chapter.UpdateRsp, error) {
	out := new(chapter.UpdateRsp)
	err := c.cc.Invoke(ctx, Chapter_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chapterClient) Delete(ctx context.Context, in *chapter.DeleteReq, opts ...grpc.CallOption) (*chapter.DeleteRsp, error) {
	out := new(chapter.DeleteRsp)
	err := c.cc.Invoke(ctx, Chapter_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChapterServer is the server API for Chapter service.
// All implementations must embed UnimplementedChapterServer
// for forward compatibility
type ChapterServer interface {
	// 创建
	Add(context.Context, *chapter.AddReq) (*chapter.AddRsp, error)
	// 获取
	Get(context.Context, *chapter.GetReq) (*chapter.GetRsp, error)
	// 获得课程所有
	GetsByCourse(context.Context, *chapter.GetsByCourseReq) (*chapter.GetsByCourseRsp, error)
	// 修改
	Update(context.Context, *chapter.UpdateReq) (*chapter.UpdateRsp, error)
	// 删除
	Delete(context.Context, *chapter.DeleteReq) (*chapter.DeleteRsp, error)
	mustEmbedUnimplementedChapterServer()
}

// UnimplementedChapterServer must be embedded to have forward compatible implementations.
type UnimplementedChapterServer struct {
}

func (UnimplementedChapterServer) Add(context.Context, *chapter.AddReq) (*chapter.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedChapterServer) Get(context.Context, *chapter.GetReq) (*chapter.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedChapterServer) GetsByCourse(context.Context, *chapter.GetsByCourseReq) (*chapter.GetsByCourseRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetsByCourse not implemented")
}
func (UnimplementedChapterServer) Update(context.Context, *chapter.UpdateReq) (*chapter.UpdateRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedChapterServer) Delete(context.Context, *chapter.DeleteReq) (*chapter.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedChapterServer) mustEmbedUnimplementedChapterServer() {}

// UnsafeChapterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChapterServer will
// result in compilation errors.
type UnsafeChapterServer interface {
	mustEmbedUnimplementedChapterServer()
}

func RegisterChapterServer(s grpc.ServiceRegistrar, srv ChapterServer) {
	s.RegisterService(&Chapter_ServiceDesc, srv)
}

func _Chapter_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chapter.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chapter_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Add(ctx, req.(*chapter.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chapter_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chapter.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chapter_Get_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Get(ctx, req.(*chapter.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chapter_GetsByCourse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chapter.GetsByCourseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).GetsByCourse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chapter_GetsByCourse_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).GetsByCourse(ctx, req.(*chapter.GetsByCourseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chapter_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chapter.UpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chapter_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Update(ctx, req.(*chapter.UpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chapter_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(chapter.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChapterServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Chapter_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChapterServer).Delete(ctx, req.(*chapter.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chapter_ServiceDesc is the grpc.ServiceDesc for Chapter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chapter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.protocol.Chapter",
	HandlerType: (*ChapterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Chapter_Add_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Chapter_Get_Handler,
		},
		{
			MethodName: "GetsByCourse",
			Handler:    _Chapter_GetsByCourse_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Chapter_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Chapter_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/protocol/chapter.proto",
}
