// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: com/itcoursee/protocol/audit.proto

package protocol

import (
	context "context"
	review "github.com/itcoursee/core/review"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuditClient is the client API for Audit service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuditClient interface {
	// 按审核获取
	GetsByReview(ctx context.Context, in *review.GetsByReviewReq, opts ...grpc.CallOption) (*review.GetsByReviewRsp, error)
}

type auditClient struct {
	cc grpc.ClientConnInterface
}

func NewAuditClient(cc grpc.ClientConnInterface) AuditClient {
	return &auditClient{cc}
}

func (c *auditClient) GetsByReview(ctx context.Context, in *review.GetsByReviewReq, opts ...grpc.CallOption) (*review.GetsByReviewRsp, error) {
	out := new(review.GetsByReviewRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.protocol.Audit/GetsByReview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuditServer is the server API for Audit service.
// All implementations must embed UnimplementedAuditServer
// for forward compatibility
type AuditServer interface {
	// 按审核获取
	GetsByReview(context.Context, *review.GetsByReviewReq) (*review.GetsByReviewRsp, error)
	mustEmbedUnimplementedAuditServer()
}

// UnimplementedAuditServer must be embedded to have forward compatible implementations.
type UnimplementedAuditServer struct {
}

func (UnimplementedAuditServer) GetsByReview(context.Context, *review.GetsByReviewReq) (*review.GetsByReviewRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetsByReview not implemented")
}
func (UnimplementedAuditServer) mustEmbedUnimplementedAuditServer() {}

// UnsafeAuditServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuditServer will
// result in compilation errors.
type UnsafeAuditServer interface {
	mustEmbedUnimplementedAuditServer()
}

func RegisterAuditServer(s grpc.ServiceRegistrar, srv AuditServer) {
	s.RegisterService(&Audit_ServiceDesc, srv)
}

func _Audit_GetsByReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(review.GetsByReviewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuditServer).GetsByReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.protocol.Audit/GetsByReview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuditServer).GetsByReview(ctx, req.(*review.GetsByReviewReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Audit_ServiceDesc is the grpc.ServiceDesc for Audit service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Audit_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.protocol.Audit",
	HandlerType: (*AuditServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetsByReview",
			Handler:    _Audit_GetsByReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/protocol/audit.proto",
}
