// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.18.1
// source: com/itcoursee/protocol/review.proto

package protocol

import (
	context "context"
	review "github.com/itcoursee/core/review"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ReviewClient is the client API for Review service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ReviewClient interface {
	// 创建
	Add(ctx context.Context, in *review.AddReq, opts ...grpc.CallOption) (*review.AddRsp, error)
	// 同意
	Approval(ctx context.Context, in *review.ApprovalReq, opts ...grpc.CallOption) (*review.ApprovalRsp, error)
	// 拒绝
	Rejection(ctx context.Context, in *review.RejectionReq, opts ...grpc.CallOption) (*review.RejectionRsp, error)
	// 获取
	Get(ctx context.Context, in *review.GetReq, opts ...grpc.CallOption) (*review.GetRsp, error)
	// 分页
	Paging(ctx context.Context, in *review.PagingReq, opts ...grpc.CallOption) (*review.PagingRsp, error)
	// 删除
	Delete(ctx context.Context, in *review.DeleteReq, opts ...grpc.CallOption) (*review.DeleteRsp, error)
}

type reviewClient struct {
	cc grpc.ClientConnInterface
}

func NewReviewClient(cc grpc.ClientConnInterface) ReviewClient {
	return &reviewClient{cc}
}

func (c *reviewClient) Add(ctx context.Context, in *review.AddReq, opts ...grpc.CallOption) (*review.AddRsp, error) {
	out := new(review.AddRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.protocol.Review/Add", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Approval(ctx context.Context, in *review.ApprovalReq, opts ...grpc.CallOption) (*review.ApprovalRsp, error) {
	out := new(review.ApprovalRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.protocol.Review/Approval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Rejection(ctx context.Context, in *review.RejectionReq, opts ...grpc.CallOption) (*review.RejectionRsp, error) {
	out := new(review.RejectionRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.protocol.Review/Rejection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Get(ctx context.Context, in *review.GetReq, opts ...grpc.CallOption) (*review.GetRsp, error) {
	out := new(review.GetRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.protocol.Review/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Paging(ctx context.Context, in *review.PagingReq, opts ...grpc.CallOption) (*review.PagingRsp, error) {
	out := new(review.PagingRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.protocol.Review/Paging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *reviewClient) Delete(ctx context.Context, in *review.DeleteReq, opts ...grpc.CallOption) (*review.DeleteRsp, error) {
	out := new(review.DeleteRsp)
	err := c.cc.Invoke(ctx, "/com.itcoursee.protocol.Review/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReviewServer is the server API for Review service.
// All implementations must embed UnimplementedReviewServer
// for forward compatibility
type ReviewServer interface {
	// 创建
	Add(context.Context, *review.AddReq) (*review.AddRsp, error)
	// 同意
	Approval(context.Context, *review.ApprovalReq) (*review.ApprovalRsp, error)
	// 拒绝
	Rejection(context.Context, *review.RejectionReq) (*review.RejectionRsp, error)
	// 获取
	Get(context.Context, *review.GetReq) (*review.GetRsp, error)
	// 分页
	Paging(context.Context, *review.PagingReq) (*review.PagingRsp, error)
	// 删除
	Delete(context.Context, *review.DeleteReq) (*review.DeleteRsp, error)
	mustEmbedUnimplementedReviewServer()
}

// UnimplementedReviewServer must be embedded to have forward compatible implementations.
type UnimplementedReviewServer struct {
}

func (UnimplementedReviewServer) Add(context.Context, *review.AddReq) (*review.AddRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedReviewServer) Approval(context.Context, *review.ApprovalReq) (*review.ApprovalRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Approval not implemented")
}
func (UnimplementedReviewServer) Rejection(context.Context, *review.RejectionReq) (*review.RejectionRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rejection not implemented")
}
func (UnimplementedReviewServer) Get(context.Context, *review.GetReq) (*review.GetRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedReviewServer) Paging(context.Context, *review.PagingReq) (*review.PagingRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Paging not implemented")
}
func (UnimplementedReviewServer) Delete(context.Context, *review.DeleteReq) (*review.DeleteRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedReviewServer) mustEmbedUnimplementedReviewServer() {}

// UnsafeReviewServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReviewServer will
// result in compilation errors.
type UnsafeReviewServer interface {
	mustEmbedUnimplementedReviewServer()
}

func RegisterReviewServer(s grpc.ServiceRegistrar, srv ReviewServer) {
	s.RegisterService(&Review_ServiceDesc, srv)
}

func _Review_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(review.AddReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.protocol.Review/Add",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Add(ctx, req.(*review.AddReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Approval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(review.ApprovalReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Approval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.protocol.Review/Approval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Approval(ctx, req.(*review.ApprovalReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Rejection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(review.RejectionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Rejection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.protocol.Review/Rejection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Rejection(ctx, req.(*review.RejectionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(review.GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.protocol.Review/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Get(ctx, req.(*review.GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Paging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(review.PagingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Paging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.protocol.Review/Paging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Paging(ctx, req.(*review.PagingReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Review_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(review.DeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReviewServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.itcoursee.protocol.Review/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReviewServer).Delete(ctx, req.(*review.DeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Review_ServiceDesc is the grpc.ServiceDesc for Review service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Review_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.itcoursee.protocol.Review",
	HandlerType: (*ReviewServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Review_Add_Handler,
		},
		{
			MethodName: "Approval",
			Handler:    _Review_Approval_Handler,
		},
		{
			MethodName: "Rejection",
			Handler:    _Review_Rejection_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _Review_Get_Handler,
		},
		{
			MethodName: "Paging",
			Handler:    _Review_Paging_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _Review_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/itcoursee/protocol/review.proto",
}
